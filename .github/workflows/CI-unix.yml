name: CI-unix

on:
  pull_request:
    paths:
      - '**'
      - '!docs/**'
      - '!src/win/**'
      - '!.**'
      - '.github/workflows/CI-unix.yml'
  push:
    branches:
      - v[0-9].*
      - master

jobs:
  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: configure
        run: |
          ./autogen.sh
          mkdir build
          (cd build && ../configure)
      - name: distcheck
        run: |
          make -C build distcheck

  build-android:
    runs-on: ubuntu-latest
    container: reactnativecommunity/react-native-android:v15.0
    env:
      ANDROID_AVD_HOME: /root/.android/avd
      MIN_ADK: 24
    steps:
      - uses: actions/checkout@v4
      - name: Envinfo
        run: npx envinfo
      - name: Configure android arm64
        # see build options you can use in https://developer.android.com/ndk/guides/cmake
        run: |
          echo "NDK version: $ANDROID_NDK_HOME"
          $CMAKE_BIN_PATH/cmake -B build -S . -DCMAKE_TOOLCHAIN_FILE=$ANDROID_NDK_HOME/build/cmake/android.toolchain.cmake -DCMAKE_BUILD_TYPE=Release -DANDROID_ABI="arm64-v8a" -DANDROID_PLATFORM=android-$MIN_ADK ..
      - name: Build android arm64
        run: |
          $CMAKE_BIN_PATH/cmake --build build
          ls -lh build
      - name: Install Android ABI arm64-v8a
        run: |
          # TODO: This can be in a pre-built docker image
          # Android-27 is the last supported emulator: https://stackoverflow.com/questions/74760054/panic-avds-cpu-architecture-arm64-is-not-supported-by-the-qemu2-emulator-on
          sdkmanager "emulator;27" "platforms;android-$MIN_ADK" "system-images;android-$MIN_ADK;google_apis;arm64-v8a"

      - name: Start emulator
        run: |
          echo no | avdmanager create avd -n test -k "system-images;android-$MIN_ADK;google_apis;arm64-v8a"

          adb start-server

          emulator @test -memory 2048 -no-audio -no-window -gpu off -no-snapshot -no-boot-anim -netdelay none -netspeed full -no-snapshot-save -no-snapshot-load -writable-system  &

          adb wait-for-device

          adb shell "su 0 setenforce 0" # to allow some syscalls like link, chmod, etc.

          # Push the build and test fixtures to the device
          adb push build /data/local/tmp
          adb shell mkdir /data/local/tmp/build/test
          adb push test/fixtures /data/local/tmp/build/test

      - name: Test
        run: |
          adb shell "cd /data/local/tmp/build ; env UV_TEST_TIMEOUT_MULTIPLIER=5 ./uv_run_tests_a"
